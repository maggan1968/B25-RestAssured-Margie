Response validations

	so far ,we send all request and stored responses into Response object, then did validations
	(statuscode,header,body)
	we can also do all of those actions in single statement by Hamcrest Matchers

	if we are getting one value we can use is() or equalTo() method
	for working multiple values we have hasItems("value1","value2".. ) method
	we can iterate through collection result with everyItem() method
	example
		everyItem(equalTo("IT_PROG"))

VERIFY RESPONSE PAYLOAD/BODY

1.Using contains method (not recommended)
	-treat the response json as a String and do contains assertion on it.
		response.body().asString().contains("ExpectedValue")

2.using path() method
	Extract values from json body using path() method, the use Junit5 for assertion
		String city = response.path("items[0].city");
		assertEquals(city,"New York");

3.using JsonPath class
	Convert Response data into JsonPath then use jsonpath getter methods to extract values
	Use Junit5 for assertion

		JsonPath jsonPath = response.jsonPath();
		assertEquals(json.getString("gender"),"Male");

4.Hamcrest Matchers with chaining restassured methods.
	we can do assertions in single statement by chaining method in RestAssured
	to find values in the body, we use the same path syntax (GPath)
	then we use hamcrest mathcer assertions to do validation
		.and().body("id",equalTo(15),"name",is("Meta"));


5.Converting JSON response to Java collection/Data Structure

Response json body --> Java collection
{
    "id": 15,
    "name": "Meta",
    "gender": "Female",
    "phone": 1938695106
}

Map<String,Object> jsonMap = response.body().as(Map.class);

Deserialization --> JSON to JAVA

		Jackson or Gson --> those are libraries to deserialization and serialization. they are also know as objectMapper,jsonparser, databinding libraries. we added jackson(databind) library to our pom.xml to deserialize

6.Converting JSON to POJO(Custom classes)
{
	"schoolame":"Cydeo",
	"city":"McLean",
	"state":"VA"
}

public class School{

	private String schoolName;
	private String city;
	private String state;

	//getter and setter
	//constructor
	//toString
}


Map<String,Object> jsonMap = response.as(Map.class);

School school1 = response.as(School.class);

school1.

So we have converted our json response to pojo class which is our custom class that we created for Spartan. this is als ocalled deserialization because we convert JSON to JAVA at the end.
we have two different way to get this conversion

1.response.as(ClassName.class) method where we give the custom class as a convertion type.

	Spartan spartan15 = response.as(Spartan.class)
	this method will work if we have Jackson(Databind) or Gson libraries in our pom.xml because they are the one who does deserialization. when we look definition of the as() method it says if you add one of those, i will do convertion for you.

2.Second way is usin JsonPath object getter like getObject.

	Spartan s15 = jsonPath.getObject("",Spartan.class)

	It also uses jackson or gson, but the benefits of uson this method, while we do deserialization we can also give path.

Scenario: when we use api/spartan/search endpoint we got result in following format.

so we have one json object,consist of 2 keys, content and totalElement
content is keeping multiple spartan json objects.

{
	content:[{},{}],
	totalElement:99
}


so the question is how can we save second spartan jsonObject inside the content array ?

to get this one in one shot, we need to point second element of the content and also do deserialization to Spartan class. so what we used is jsonPath.getObject method where we have option to provide path and classType at the same time.


	Spartan s2 = jsonPath.getObject("content[1]",Spartan.class)

as you see above, we pointed the second element and tell we want to convert it to Spartan class.
response.as() method does NOT have option to use path and class at the same time , that is the reason JsonPath sometimes could be more useful.


Jackson Annotations
@JsonProperty("region_id")
	private int regionID;

	//if you jsonkey and variable name not matching, you can map it with JsonProperty annotation.
		lets say you have region_id in the json response but you want to change your varible name to regionId. how can we tell jackson to get region_id value and put inside the regionId variable ?

		we use @JsonProperty annotation that comes from jackson, we provide the jsonkey that we want to map, and we put on top of the field that we create connection

		@JsonProperty("region_id")
		private int regionId;


Scenario: you have json which has many keys and values, but you just need only 4 value to do verification, how can you only get 4 values as a POJO class and ignore the rest ?



	when we create a pojo with only 4 values and try to do deserialize we got following exception
	com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "employee_id"

	this is because we dont have employee_id field in our pojo class. so how can we tell jackson ignore all the json keys that we dont have corresponding variables in our pojo class ?

	Solution:
	@JsonIgnoreProperties(ignoreUnknown = true)

	we put this annotation which comes from jackson library on top of the pojo class we want to ignore fields. default value for ignoreUnknown is false so make sure you set it true.


we want to automate api vs database testing with maven project.
so we have api dependencies ready for api request we can send get request to api/spartans/
 endpoint to retrieve individual api result. then we can store it in Map<String,Object> with the
  help of Jackson Library and as() method from rest assured.





